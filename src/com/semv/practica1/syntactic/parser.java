
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.semv.practica1.syntactic;

import com.semv.practica1.lexer.AnalizadorLexico;
import com.semv.practica1.symbols_table.Element;
import com.semv.practica1.symbols_table.ScopeTree;
import com.semv.practica1.symbols_table.Scope;
import com.semv.practica1.symbols_table.SymAttributes;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\013\007\000\002\012\006" +
    "\000\002\012\004\000\002\004\005\000\002\005\004\000" +
    "\002\005\003\000\002\006\005\000\002\006\006\000\002" +
    "\006\007\000\002\006\005\000\002\006\012\000\002\006" +
    "\017\000\002\006\007\000\002\006\010\000\002\006\003" +
    "\000\002\021\003\000\002\021\005\000\002\021\002\000" +
    "\002\007\005\000\002\007\005\000\002\007\003\000\002" +
    "\010\005\000\002\010\005\000\002\010\003\000\002\011" +
    "\006\000\002\011\005\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\014\005\000\002\014\003\000\002" +
    "\015\005\000\002\015\003\000\002\016\003\000\002\016" +
    "\004\000\002\017\005\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\010\045\006\046\005\047\004\001\002\000" +
    "\006\014\uffde\051\uffde\001\002\000\006\014\uffdf\051\uffdf" +
    "\001\002\000\006\014\uffe0\051\uffe0\001\002\000\012\002" +
    "\uffff\045\006\046\005\047\004\001\002\000\004\051\014" +
    "\001\002\000\004\002\012\001\002\000\004\002\000\001" +
    "\002\000\012\002\ufffe\045\ufffe\046\ufffe\047\ufffe\001\002" +
    "\000\004\005\015\001\002\000\010\045\006\046\005\047" +
    "\004\001\002\000\006\006\022\013\021\001\002\000\004" +
    "\051\020\001\002\000\006\006\ufffb\013\ufffb\001\002\000" +
    "\010\045\006\046\005\047\004\001\002\000\004\007\023" +
    "\001\002\000\026\004\035\007\023\022\025\025\026\026" +
    "\036\027\034\045\006\046\005\047\004\051\027\001\002" +
    "\000\012\002\ufffd\045\ufffd\046\ufffd\047\ufffd\001\002\000" +
    "\004\005\150\001\002\000\004\005\134\001\002\000\006" +
    "\005\126\015\125\001\002\000\030\004\uffef\007\uffef\010" +
    "\uffef\022\uffef\025\uffef\026\uffef\027\uffef\045\uffef\046\uffef" +
    "\047\uffef\051\uffef\001\002\000\030\004\035\007\023\010" +
    "\124\022\025\025\026\026\036\027\034\045\006\046\005" +
    "\047\004\051\027\001\002\000\030\004\ufff8\007\ufff8\010" +
    "\ufff8\022\ufff8\025\ufff8\026\ufff8\027\ufff8\045\ufff8\046\ufff8" +
    "\047\ufff8\051\ufff8\001\002\000\006\014\uffec\051\106\001" +
    "\002\000\004\007\023\001\002\000\012\011\050\043\044" +
    "\044\040\051\042\001\002\000\004\005\037\001\002\000" +
    "\014\011\050\031\052\043\044\044\040\051\042\001\002" +
    "\000\036\006\uffe1\012\uffe1\014\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\001\002\000\012\006\uffda\014\uffda\032" +
    "\uffda\033\uffda\001\002\000\040\005\104\006\uffe3\012\uffe3" +
    "\014\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\032\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\001\002" +
    "\000\036\006\uffe6\012\uffe6\014\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6" +
    "\037\uffe6\040\uffe6\001\002\000\036\006\uffe2\012\uffe2\014" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\032\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\001\002\000" +
    "\012\006\uffd9\014\uffd9\032\uffd9\033\uffd9\001\002\000\012" +
    "\006\uffdc\014\uffdc\032\060\033\uffdc\001\002\000\036\006" +
    "\uffe9\012\uffe9\014\uffe9\016\uffe9\017\uffe9\020\074\021\075" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040" +
    "\uffe9\001\002\000\012\011\050\043\044\044\040\051\042" +
    "\001\002\000\020\016\070\017\065\034\066\035\063\036" +
    "\071\037\067\040\072\001\002\000\012\011\050\043\044" +
    "\044\040\051\042\001\002\000\006\006\055\033\054\001" +
    "\002\000\014\011\050\031\052\043\044\044\040\051\042" +
    "\001\002\000\004\007\023\001\002\000\030\004\ufff1\007" +
    "\ufff1\010\ufff1\022\ufff1\025\ufff1\026\ufff1\027\ufff1\045\ufff1" +
    "\046\ufff1\047\ufff1\051\ufff1\001\002\000\012\006\uffdd\014" +
    "\uffdd\032\060\033\uffdd\001\002\000\014\011\050\031\052" +
    "\043\044\044\040\051\042\001\002\000\012\006\uffdb\014" +
    "\uffdb\032\uffdb\033\uffdb\001\002\000\012\006\uffd8\014\uffd8" +
    "\032\uffd8\033\uffd8\001\002\000\012\011\uffd5\043\uffd5\044" +
    "\uffd5\051\uffd5\001\002\000\012\011\050\043\044\044\040" +
    "\051\042\001\002\000\012\011\050\043\044\044\040\051" +
    "\042\001\002\000\012\011\uffd6\043\uffd6\044\uffd6\051\uffd6" +
    "\001\002\000\012\011\uffd2\043\uffd2\044\uffd2\051\uffd2\001" +
    "\002\000\012\011\050\043\044\044\040\051\042\001\002" +
    "\000\012\011\uffd4\043\uffd4\044\uffd4\051\uffd4\001\002\000" +
    "\012\011\uffd3\043\uffd3\044\uffd3\051\uffd3\001\002\000\036" +
    "\006\uffeb\012\uffeb\014\uffeb\016\uffeb\017\uffeb\020\074\021" +
    "\075\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\001\002\000\012\011\050\043\044\044\040\051" +
    "\042\001\002\000\012\011\050\043\044\044\040\051\042" +
    "\001\002\000\036\006\uffe7\012\uffe7\014\uffe7\016\uffe7\017" +
    "\uffe7\020\uffe7\021\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\037\uffe7\040\uffe7\001\002\000\036\006\uffe8\012" +
    "\uffe8\014\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\032\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\001" +
    "\002\000\036\006\uffea\012\uffea\014\uffea\016\uffea\017\uffea" +
    "\020\074\021\075\032\uffea\033\uffea\034\uffea\035\uffea\036" +
    "\uffea\037\uffea\040\uffea\001\002\000\016\006\uffd7\014\uffd7" +
    "\016\070\017\065\032\uffd7\033\uffd7\001\002\000\010\012" +
    "\103\016\070\017\065\001\002\000\036\006\uffe4\012\uffe4" +
    "\014\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\032\uffe4\033" +
    "\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\001\002" +
    "\000\006\006\uffec\051\106\001\002\000\004\006\111\001" +
    "\002\000\010\006\uffee\013\107\014\uffee\001\002\000\010" +
    "\006\uffec\014\uffec\051\106\001\002\000\006\006\uffed\014" +
    "\uffed\001\002\000\036\006\uffe5\012\uffe5\014\uffe5\016\uffe5" +
    "\017\uffe5\020\uffe5\021\uffe5\032\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\001\002\000\010\014\113" +
    "\016\070\017\065\001\002\000\030\004\ufff4\007\ufff4\010" +
    "\ufff4\022\ufff4\025\ufff4\026\ufff4\027\ufff4\045\ufff4\046\ufff4" +
    "\047\ufff4\051\ufff4\001\002\000\004\030\115\001\002\000" +
    "\004\005\116\001\002\000\014\011\050\031\052\043\044" +
    "\044\040\051\042\001\002\000\006\006\120\033\054\001" +
    "\002\000\030\004\ufff0\007\ufff0\010\ufff0\022\ufff0\025\ufff0" +
    "\026\ufff0\027\ufff0\045\ufff0\046\ufff0\047\ufff0\051\ufff0\001" +
    "\002\000\004\014\122\001\002\000\030\004\ufff7\007\ufff7" +
    "\010\ufff7\022\ufff7\025\ufff7\026\ufff7\027\ufff7\045\ufff7\046" +
    "\ufff7\047\ufff7\051\ufff7\001\002\000\030\004\ufff9\007\ufff9" +
    "\010\ufff9\022\ufff9\025\ufff9\026\ufff9\027\ufff9\045\ufff9\046" +
    "\ufff9\047\ufff9\051\ufff9\001\002\000\036\002\ufffa\004\ufffa" +
    "\007\ufffa\010\ufffa\022\ufffa\024\ufffa\025\ufffa\026\ufffa\027" +
    "\ufffa\030\ufffa\045\ufffa\046\ufffa\047\ufffa\051\ufffa\001\002" +
    "\000\012\011\050\043\044\044\040\051\042\001\002\000" +
    "\006\006\uffec\051\106\001\002\000\004\006\130\001\002" +
    "\000\004\014\131\001\002\000\030\004\ufff5\007\ufff5\010" +
    "\ufff5\022\ufff5\025\ufff5\026\ufff5\027\ufff5\045\ufff5\046\ufff5" +
    "\047\ufff5\051\ufff5\001\002\000\010\014\133\016\070\017" +
    "\065\001\002\000\030\004\ufff6\007\ufff6\010\ufff6\022\ufff6" +
    "\025\ufff6\026\ufff6\027\ufff6\045\ufff6\046\ufff6\047\ufff6\051" +
    "\ufff6\001\002\000\004\051\135\001\002\000\004\015\136" +
    "\001\002\000\012\011\050\043\044\044\040\051\042\001" +
    "\002\000\010\014\140\016\070\017\065\001\002\000\014" +
    "\011\050\031\052\043\044\044\040\051\042\001\002\000" +
    "\006\014\142\033\054\001\002\000\004\051\143\001\002" +
    "\000\004\015\144\001\002\000\012\011\050\043\044\044" +
    "\040\051\042\001\002\000\010\006\146\016\070\017\065" +
    "\001\002\000\004\007\023\001\002\000\030\004\ufff2\007" +
    "\ufff2\010\ufff2\022\ufff2\025\ufff2\026\ufff2\027\ufff2\045\ufff2" +
    "\046\ufff2\047\ufff2\051\ufff2\001\002\000\014\011\050\031" +
    "\052\043\044\044\040\051\042\001\002\000\006\006\152" +
    "\033\054\001\002\000\004\023\153\001\002\000\004\007" +
    "\023\001\002\000\004\024\155\001\002\000\004\007\023" +
    "\001\002\000\030\004\ufff3\007\ufff3\010\ufff3\022\ufff3\025" +
    "\ufff3\026\ufff3\027\ufff3\045\ufff3\046\ufff3\047\ufff3\051\ufff3" +
    "\001\002\000\004\051\160\001\002\000\006\006\ufffc\013" +
    "\ufffc\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\010\002\010\003\006\022\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\160\003\006\022\007\001\001\000\004\013\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\015\022\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\156\001\001\000\004\004\023\001\001\000\012\004" +
    "\027\005\030\006\031\022\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\027\006\122\022\032\001\001" +
    "\000\002\001\001\000\004\021\120\001\001\000\004\004" +
    "\113\001\001\000\010\007\111\010\046\011\042\001\001" +
    "\000\002\001\001\000\020\007\050\010\046\011\042\014" +
    "\052\015\045\016\040\017\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\101\010\046\011\042\001\001\000" +
    "\004\020\063\001\001\000\012\007\050\010\046\011\042" +
    "\017\061\001\001\000\002\001\001\000\016\007\050\010" +
    "\046\011\042\015\056\016\040\017\044\001\001\000\004" +
    "\004\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\007\050\010\046\011\042\016\060\017\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\100\010\046\011\042\001\001\000\006\010\077" +
    "\011\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\072\011\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\076\001\001\000" +
    "\004\011\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\007\050\010" +
    "\046\011\042\014\116\015\045\016\040\017\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\131\010\046\011\042\001\001\000\004\021\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\136\010\046\011\042\001\001" +
    "\000\002\001\001\000\020\007\050\010\046\011\042\014" +
    "\140\015\045\016\040\017\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\144\010" +
    "\046\011\042\001\001\000\002\001\001\000\004\004\146" +
    "\001\001\000\002\001\001\000\020\007\050\010\046\011" +
    "\042\014\150\015\045\016\040\017\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\153\001\001\000" +
    "\002\001\001\000\004\004\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


AnalizadorLexico scanner=(AnalizadorLexico)getScanner();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAM ::= PART PROGRAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= PART 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PART ::= TYPE RESTPART 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PART",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // RESTPART ::= tid l_par LISTPARAM r_par BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESTPART",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LISTPARAM ::= LISTPARAM comma TYPE tid 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTPARAM ::= TYPE tid 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BLQ ::= l_brace SENTLIST r_brace 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTLIST ::= SENTLIST SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTLIST ::= SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENT ::= TYPE LID semicolon 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Element> l = (ArrayList<Element>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
for (Element id:l){
SymAttributes symAttributes = new SymAttributes(t.getName(), id.getLine(), id.getColumn(), id.getName());
//declaración
System.out.println(t.getName());
	if (ScopeTree.getCurrentScope().getSymTable().addItem(id.getName(), symAttributes)){
		RESULT = symAttributes;
	}
	else{
		System.out.println("El s�mbolo " + id.getName() + " existe. Lin " + id.getLine() + " Col " + id.getColumn());
		RESULT=new SymAttributes("error", -1, -1, "error");
		break;
	}
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENT ::= tid assig EXP semicolon 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Element id = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
//asignación

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENT ::= tid l_par LID r_par semicolon 
            {
              Object RESULT =null;
		
//llamada a una función

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENT ::= treturn EXP semicolon 
            {
              Object RESULT =null;
		
//retorno de una función

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENT ::= tif l_par LCOND r_par tthen BLQ telse BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENT ::= tfor l_par tid assig EXP semicolon LCOND semicolon tid assig EXP r_par BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENT ::= twhile l_par LCOND r_par BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENT ::= tdo BLQ tuntil l_par LCOND r_par 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENT ::= BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LID ::= tid 
            {
              ArrayList<Element> RESULT =null;
		
Element e=new Element(scanner.yytext(), scanner.getYyline(), scanner.getYycolumn());
ArrayList<Element> salida=new ArrayList<Element>();
salida.add(e);
RESULT=salida;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LID ::= tid comma LID 
            {
              ArrayList<Element> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Element> l = (ArrayList<Element>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
l.add(t);
RESULT=l;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LID ::= 
            {
              ArrayList<Element> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXP ::= EXP add EXPT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXP ::= EXP sub EXPT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXP ::= EXPT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPT ::= EXPT mul FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPT ::= EXPT div FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPT ::= FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FACTOR ::= tid l_par LID r_par 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FACTOR ::= l_bracket EXP r_bracket 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FACTOR ::= tid 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FACTOR ::= constint 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FACTOR ::= constfloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TYPE ::= tvoid 
            {
              Element RESULT =null;
		 RESULT = new Element(scanner.yytext(), scanner.getYyline(), scanner.getYycolumn()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TYPE ::= tint 
            {
              Element RESULT =null;
		 RESULT = new Element(scanner.yytext(), scanner.getYyline(), scanner.getYycolumn()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TYPE ::= tfloat 
            {
              Element RESULT =null;
		 RESULT = new Element(scanner.yytext(), scanner.getYyline(), scanner.getYycolumn()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LCOND ::= LCOND tor LCONDT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LCOND ::= LCONDT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LCONDT ::= LCONDT tand LCONDF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCONDT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LCONDT ::= LCONDF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCONDT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LCONDF ::= COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCONDF",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LCONDF ::= tnot COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCONDF",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COND ::= EXP OPR EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPR ::= equals 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPR ::= less 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPR ::= greater 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPR ::= greaterequal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPR ::= lessequal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
