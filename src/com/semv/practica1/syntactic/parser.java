
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.semv.practica1.syntactic;

import com.semv.practica1.symbols_table.Element;
import com.semv.practica1.symbols_table.ScopeTree;
import com.semv.practica1.symbols_table.Scope;
import com.semv.practica1.symbols_table.SymAttributes;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\013\007\000\002\012\006" +
    "\000\002\012\004\000\002\004\005\000\002\005\004\000" +
    "\002\005\003\000\002\006\005\000\002\006\006\000\002" +
    "\006\007\000\002\006\005\000\002\006\012\000\002\006" +
    "\017\000\002\006\007\000\002\006\010\000\002\006\003" +
    "\000\002\021\003\000\002\021\005\000\002\021\002\000" +
    "\002\007\005\000\002\007\005\000\002\007\003\000\002" +
    "\010\005\000\002\010\005\000\002\010\003\000\002\011" +
    "\006\000\002\011\005\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\014\005\000\002\014\003\000\002" +
    "\015\005\000\002\015\003\000\002\016\003\000\002\016" +
    "\004\000\002\017\005\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\010\045\006\046\005\047\004\001\002\000" +
    "\006\005\uffde\051\uffde\001\002\000\006\005\uffdf\051\uffdf" +
    "\001\002\000\006\005\uffe0\051\uffe0\001\002\000\012\002" +
    "\uffff\045\006\046\005\047\004\001\002\000\004\051\014" +
    "\001\002\000\004\002\012\001\002\000\004\002\000\001" +
    "\002\000\012\002\ufffe\045\ufffe\046\ufffe\047\ufffe\001\002" +
    "\000\004\007\015\001\002\000\010\045\006\046\005\047" +
    "\004\001\002\000\006\004\021\010\022\001\002\000\004" +
    "\051\020\001\002\000\006\004\ufffb\010\ufffb\001\002\000" +
    "\010\045\006\046\005\047\004\001\002\000\004\011\023" +
    "\001\002\000\026\006\035\011\023\023\025\026\026\027" +
    "\036\030\034\045\006\046\005\047\004\051\027\001\002" +
    "\000\012\002\ufffd\045\ufffd\046\ufffd\047\ufffd\001\002\000" +
    "\004\007\150\001\002\000\004\007\134\001\002\000\006" +
    "\007\126\016\125\001\002\000\030\006\uffef\011\uffef\012" +
    "\uffef\023\uffef\026\uffef\027\uffef\030\uffef\045\uffef\046\uffef" +
    "\047\uffef\051\uffef\001\002\000\030\006\035\011\023\012" +
    "\124\023\025\026\026\027\036\030\034\045\006\046\005" +
    "\047\004\051\027\001\002\000\030\006\ufff8\011\ufff8\012" +
    "\ufff8\023\ufff8\026\ufff8\027\ufff8\030\ufff8\045\ufff8\046\ufff8" +
    "\047\ufff8\051\ufff8\001\002\000\006\005\uffec\051\106\001" +
    "\002\000\004\011\023\001\002\000\012\013\050\041\044" +
    "\042\040\051\042\001\002\000\004\007\037\001\002\000" +
    "\014\013\050\031\052\041\044\042\040\051\042\001\002" +
    "\000\036\005\uffe1\010\uffe1\014\uffe1\015\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\001\002\000\012\005\uffda\010\uffda\033" +
    "\uffda\034\uffda\001\002\000\040\005\uffe3\007\104\010\uffe3" +
    "\014\uffe3\015\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\001\002" +
    "\000\036\005\uffe6\010\uffe6\014\uffe6\015\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6" +
    "\037\uffe6\040\uffe6\001\002\000\036\005\uffe2\010\uffe2\014" +
    "\uffe2\015\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\001\002\000" +
    "\012\005\uffd9\010\uffd9\033\uffd9\034\uffd9\001\002\000\012" +
    "\005\uffdc\010\uffdc\033\060\034\uffdc\001\002\000\036\005" +
    "\uffe9\010\uffe9\014\uffe9\015\uffe9\017\uffe9\020\uffe9\021\074" +
    "\022\075\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040" +
    "\uffe9\001\002\000\012\013\050\041\044\042\040\051\042" +
    "\001\002\000\020\015\066\017\070\020\065\035\063\036" +
    "\071\037\067\040\072\001\002\000\012\013\050\041\044" +
    "\042\040\051\042\001\002\000\006\010\055\034\054\001" +
    "\002\000\014\013\050\031\052\041\044\042\040\051\042" +
    "\001\002\000\004\011\023\001\002\000\030\006\ufff1\011" +
    "\ufff1\012\ufff1\023\ufff1\026\ufff1\027\ufff1\030\ufff1\045\ufff1" +
    "\046\ufff1\047\ufff1\051\ufff1\001\002\000\012\005\uffdd\010" +
    "\uffdd\033\060\034\uffdd\001\002\000\014\013\050\031\052" +
    "\041\044\042\040\051\042\001\002\000\012\005\uffdb\010" +
    "\uffdb\033\uffdb\034\uffdb\001\002\000\012\005\uffd8\010\uffd8" +
    "\033\uffd8\034\uffd8\001\002\000\012\013\uffd5\041\uffd5\042" +
    "\uffd5\051\uffd5\001\002\000\012\013\050\041\044\042\040" +
    "\051\042\001\002\000\012\013\050\041\044\042\040\051" +
    "\042\001\002\000\012\013\uffd6\041\uffd6\042\uffd6\051\uffd6" +
    "\001\002\000\012\013\uffd2\041\uffd2\042\uffd2\051\uffd2\001" +
    "\002\000\012\013\050\041\044\042\040\051\042\001\002" +
    "\000\012\013\uffd4\041\uffd4\042\uffd4\051\uffd4\001\002\000" +
    "\012\013\uffd3\041\uffd3\042\uffd3\051\uffd3\001\002\000\036" +
    "\005\uffeb\010\uffeb\014\uffeb\015\uffeb\017\uffeb\020\uffeb\021" +
    "\074\022\075\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\001\002\000\012\013\050\041\044\042\040\051" +
    "\042\001\002\000\012\013\050\041\044\042\040\051\042" +
    "\001\002\000\036\005\uffe7\010\uffe7\014\uffe7\015\uffe7\017" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\037\uffe7\040\uffe7\001\002\000\036\005\uffe8\010" +
    "\uffe8\014\uffe8\015\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\001" +
    "\002\000\036\005\uffea\010\uffea\014\uffea\015\uffea\017\uffea" +
    "\020\uffea\021\074\022\075\033\uffea\034\uffea\035\uffea\036" +
    "\uffea\037\uffea\040\uffea\001\002\000\016\005\uffd7\010\uffd7" +
    "\017\070\020\065\033\uffd7\034\uffd7\001\002\000\010\014" +
    "\103\017\070\020\065\001\002\000\036\005\uffe4\010\uffe4" +
    "\014\uffe4\015\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\033" +
    "\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\001\002" +
    "\000\006\010\uffec\051\106\001\002\000\004\010\111\001" +
    "\002\000\010\004\107\005\uffee\010\uffee\001\002\000\010" +
    "\005\uffec\010\uffec\051\106\001\002\000\006\005\uffed\010" +
    "\uffed\001\002\000\036\005\uffe5\010\uffe5\014\uffe5\015\uffe5" +
    "\017\uffe5\020\uffe5\021\uffe5\022\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\001\002\000\010\005\113" +
    "\017\070\020\065\001\002\000\030\006\ufff4\011\ufff4\012" +
    "\ufff4\023\ufff4\026\ufff4\027\ufff4\030\ufff4\045\ufff4\046\ufff4" +
    "\047\ufff4\051\ufff4\001\002\000\004\032\115\001\002\000" +
    "\004\007\116\001\002\000\014\013\050\031\052\041\044" +
    "\042\040\051\042\001\002\000\006\010\120\034\054\001" +
    "\002\000\030\006\ufff0\011\ufff0\012\ufff0\023\ufff0\026\ufff0" +
    "\027\ufff0\030\ufff0\045\ufff0\046\ufff0\047\ufff0\051\ufff0\001" +
    "\002\000\004\005\122\001\002\000\030\006\ufff7\011\ufff7" +
    "\012\ufff7\023\ufff7\026\ufff7\027\ufff7\030\ufff7\045\ufff7\046" +
    "\ufff7\047\ufff7\051\ufff7\001\002\000\030\006\ufff9\011\ufff9" +
    "\012\ufff9\023\ufff9\026\ufff9\027\ufff9\030\ufff9\045\ufff9\046" +
    "\ufff9\047\ufff9\051\ufff9\001\002\000\036\002\ufffa\006\ufffa" +
    "\011\ufffa\012\ufffa\023\ufffa\025\ufffa\026\ufffa\027\ufffa\030" +
    "\ufffa\032\ufffa\045\ufffa\046\ufffa\047\ufffa\051\ufffa\001\002" +
    "\000\012\013\050\041\044\042\040\051\042\001\002\000" +
    "\006\010\uffec\051\106\001\002\000\004\010\130\001\002" +
    "\000\004\005\131\001\002\000\030\006\ufff5\011\ufff5\012" +
    "\ufff5\023\ufff5\026\ufff5\027\ufff5\030\ufff5\045\ufff5\046\ufff5" +
    "\047\ufff5\051\ufff5\001\002\000\010\005\133\017\070\020" +
    "\065\001\002\000\030\006\ufff6\011\ufff6\012\ufff6\023\ufff6" +
    "\026\ufff6\027\ufff6\030\ufff6\045\ufff6\046\ufff6\047\ufff6\051" +
    "\ufff6\001\002\000\004\051\135\001\002\000\004\016\136" +
    "\001\002\000\012\013\050\041\044\042\040\051\042\001" +
    "\002\000\010\005\140\017\070\020\065\001\002\000\014" +
    "\013\050\031\052\041\044\042\040\051\042\001\002\000" +
    "\006\005\142\034\054\001\002\000\004\051\143\001\002" +
    "\000\004\016\144\001\002\000\012\013\050\041\044\042" +
    "\040\051\042\001\002\000\010\010\146\017\070\020\065" +
    "\001\002\000\004\011\023\001\002\000\030\006\ufff2\011" +
    "\ufff2\012\ufff2\023\ufff2\026\ufff2\027\ufff2\030\ufff2\045\ufff2" +
    "\046\ufff2\047\ufff2\051\ufff2\001\002\000\014\013\050\031" +
    "\052\041\044\042\040\051\042\001\002\000\006\010\152" +
    "\034\054\001\002\000\004\024\153\001\002\000\004\011" +
    "\023\001\002\000\004\025\155\001\002\000\004\011\023" +
    "\001\002\000\030\006\ufff3\011\ufff3\012\ufff3\023\ufff3\026" +
    "\ufff3\027\ufff3\030\ufff3\045\ufff3\046\ufff3\047\ufff3\051\ufff3" +
    "\001\002\000\004\051\160\001\002\000\006\004\ufffc\010" +
    "\ufffc\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\010\002\010\003\006\022\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\160\003\006\022\007\001\001\000\004\013\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\015\022\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\156\001\001\000\004\004\023\001\001\000\012\004" +
    "\027\005\030\006\031\022\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\027\006\122\022\032\001\001" +
    "\000\002\001\001\000\004\021\120\001\001\000\004\004" +
    "\113\001\001\000\010\007\111\010\046\011\042\001\001" +
    "\000\002\001\001\000\020\007\050\010\046\011\042\014" +
    "\052\015\045\016\040\017\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\101\010\046\011\042\001\001\000" +
    "\004\020\063\001\001\000\012\007\050\010\046\011\042" +
    "\017\061\001\001\000\002\001\001\000\016\007\050\010" +
    "\046\011\042\015\056\016\040\017\044\001\001\000\004" +
    "\004\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\007\050\010\046\011\042\016\060\017\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\100\010\046\011\042\001\001\000\006\010\077" +
    "\011\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\072\011\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\076\001\001\000" +
    "\004\011\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\007\050\010" +
    "\046\011\042\014\116\015\045\016\040\017\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\131\010\046\011\042\001\001\000\004\021\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\136\010\046\011\042\001\001" +
    "\000\002\001\001\000\020\007\050\010\046\011\042\014" +
    "\140\015\045\016\040\017\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\144\010" +
    "\046\011\042\001\001\000\002\001\001\000\004\004\146" +
    "\001\001\000\002\001\001\000\020\007\050\010\046\011" +
    "\042\014\150\015\045\016\040\017\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\153\001\001\000" +
    "\002\001\001\000\004\004\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAM ::= PART PROGRAM 
            {
              SymAttributes RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymAttributes p1 = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymAttributes p2 = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
if ((p1.getType()=="error")||(p2.getType()=="error")){
RESULT=new SymAttributes("error", p1.getRow(), p1.getCol(), p1.getName());
}else{
RESULT=p2;
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymAttributes start_val = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= PART 
            {
              SymAttributes RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymAttributes p = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PART ::= TYPE RESTPART 
            {
              SymAttributes RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymAttributes r = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
//Esto es la definición de una función. Vamos a buscarla, y si ya existe, emitimos error.
if (r.getType()==t.getName()){
Scope scope=ScopeTree.getCurrentScope();
if (scope.getSymTable().getAttributes(r.getName())==null){ //no existe, vamos a agregarlo
scope.getSymTable().addItem(r.getName(), new SymAttributes(t.getName(), r.getRow(), r.getCol(), r.getName()));
scope.addChild(new Scope(scope, r.getName()));
RESULT=r;
}else{ //no tiene error, pero existe
System.out.println("Identificador de función duplicado. Línea "+r.getRow()+", columna "+r.getCol());
RESULT=new SymAttributes("error", r.getRow(), r.getCol(), r.getName());
}
}else if (r.getType()=="error"){
RESULT=r; //propagamos el error sin crear nada
}else{
System.out.println("El tipo de retorno de la función no coincide con el tipo declarado en su cabecera. Línea "+r.getRow()+", columna "+r.getCol());
RESULT=r;
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PART",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // RESTPART ::= tid l_par LISTPARAM r_par BLQ 
            {
              SymAttributes RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Element id = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymAttributes l = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymAttributes b = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
if ((b.getType()=="error")||(l.getType()=="error")){
RESULT=b; //propagamos el error
}else{
//propagamos el identificador de la función
RESULT=new SymAttributes("", id.getLine(), id.getColumn(), id.getName());
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESTPART",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LISTPARAM ::= LISTPARAM comma TYPE tid 
            {
              SymAttributes RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element id = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
//agregar a la tabla de símbolos del hijo, si no existe

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTPARAM ::= TYPE tid 
            {
              SymAttributes RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element id = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
//agregar a la tabla de símbolos del hijo

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BLQ ::= l_brace SENTLIST r_brace 
            {
              SymAttributes RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymAttributes s = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTLIST ::= SENTLIST SENT 
            {
              SymAttributes RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymAttributes l = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymAttributes s = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
if ((l.getType()=="error")||(s.getType()=="error")){
RESULT=new SymAttributes("error", s.getRow(), s.getCol(), s.getName());
}else{
RESULT=l;
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTLIST ::= SENT 
            {
              SymAttributes RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymAttributes s = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENT ::= TYPE LID semicolon 
            {
              SymAttributes RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymAttributes l = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
for (Element id:l){
SymAttributes symAttributes = new SymAttributes(t.getName(), id.getLine(), id.getColumn(), id.getName());
//declaración
if (ScopeTree.getCurrentScope().getSymTable().addItem(id.getName(), symAttributes)){
		RESULT = symAttributes;
	}
	else{
		System.out.println("El símbolo " + id.getName() + " existe. Lin " + id.getLine() + " Col " + id.getColumn());
		RESULT=new SymAttributes("error", -1, -1, "error");
		break;
	}
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENT ::= tid assig EXP semicolon 
            {
              SymAttributes RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Element id = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymAttributes exp = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
//asignación. Buscar en tabla, comprobar tipo, devolver error si no se encuentra o si tipos no coinciden
SymAttributes symbol=null;
Scope scope=ScopeTree.getCurrentScope();
while (scope.getParent()!=null){
symbol=scope.getSymTable().getAttributes(id.getName());
if (symbol!=null){
break; // lo hemos encontrado!
}
}
if (symbol==null){
System.out.println("No se encuentra el símbolo "+id.getName()+" al que se hace referencia en línea "+id.getLine()+", columna "+id.getColumn());
RESULT=new SymAttributes("error", id.getLine(), id.getColumn(), id.getName());
}else{
if (symbol.getType()==exp.getType()){
RESULT=exp;
}else if((symbol.getType()=="error")||(exp.getType()=="error")){
RESULT=new SymAttributes("error", symbol.getRow(), symbol.getCol(), symbol.getName());
}else{
System.out.println("No se puede asignar la expresión a la variable "+symbol.getName()+", línea "+symbol.getRow()+", columna "+symbol.getCol());
RESULT=new SymAttributes("error", symbol.getRow(), symbol.getCol(), symbol.getName());
}
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENT ::= tid l_par LID r_par semicolon 
            {
              SymAttributes RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Element id = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
SymAttributes symbol=null;
Scope scope=ScopeTree.getCurrentScope();
while (scope.getParent()!=null){
symbol=scope.getSymTable().getAttributes(id.getName());
if (symbol!=null){
break; // lo hemos encontrado!
}
}
if (symbol==null){
System.out.println("No se encuentra el símbolo "+id.getName()+" al que se hace referencia en línea "+id.getLine()+", columna "+id.getColumn());
RESULT=new SymAttributes("error", id.getLine(), id.getColumn(), id.getName());
}else{
RESULT=new SymAttributes("", id.getLine(), id.getColumn(), id.getName());
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENT ::= treturn EXP semicolon 
            {
              SymAttributes RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymAttributes e = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
RESULT=e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENT ::= tif l_par LCOND r_par tthen BLQ telse BLQ 
            {
              SymAttributes RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		SymAttributes l = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymAttributes b1 = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymAttributes b2 = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
if ((l.getType()=="error")||(b1.getType()=="error")||(b2.getType()=="error")){
RESULT=new SymAttributes("error", l.getRow(), l.getCol(), l.getName());
}else{
RESULT=new SymAttributes("", 0, 0, "");
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENT ::= tfor l_par tid assig EXP semicolon LCOND semicolon tid assig EXP r_par BLQ 
            {
              SymAttributes RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Element id1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		SymAttributes e1 = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		SymAttributes l = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Element id2 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymAttributes e2 = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymAttributes b = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		


              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENT ::= twhile l_par LCOND r_par BLQ 
            {
              SymAttributes RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymAttributes l = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymAttributes b = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
if ((l.getType()=="error")||(b.getType()=="error")){
RESULT=b;
}else{
RESULT=new SymAttributes("", 0, 0, "");
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENT ::= tdo BLQ tuntil l_par LCOND r_par 
            {
              SymAttributes RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		SymAttributes b = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymAttributes l = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
if ((b.getType()=="error")||(l.getType()=="error")){
RESULT=new SymAttributes("error", l.getRow(), l.getCol(), l.getName());
}else{
RESULT=new SymAttributes("", 0, 0, "");
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENT ::= BLQ 
            {
              SymAttributes RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymAttributes b = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LID ::= tid 
            {
              SymAttributes RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element id = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
ArrayList<Element> salida=new ArrayList<Element>();
salida.add(id);
RESULT=salida;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LID ::= tid comma LID 
            {
              SymAttributes RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymAttributes l = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
l.add(t);
RESULT=l;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LID ::= 
            {
              SymAttributes RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXP ::= EXP add EXPT 
            {
              SymAttributes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymAttributes e1 = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymAttributes e2 = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
if (e1.getType()==e2.getType()){
RESULT=e1;
}else if((e1.getType()=="error")||(e2.getType()=="error")){
RESULT=new SymAttributes("error", e1.getRow(), e1.getCol(), e1.getName());
}else{
System.out.println("El tipo de los operandos de la suma no coincide. Línea "+e1.getRow()+", columna "+e1.getCol());
RESULT=new SymAttributes("error", e1.getRow(), e1.getCol(), e1.getName());
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXP ::= EXP sub EXPT 
            {
              SymAttributes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymAttributes e1 = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymAttributes e2 = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
if (e1.getType()==e2.getType()){
RESULT=e1;
}else if((e1.getType()=="error")||(e2.getType()=="error")){
RESULT=new SymAttributes("error", e1.getRow(), e1.getCol(), e1.getName());
}else{
System.out.println("El tipo de los operandos de la resta no coincide. Línea "+e1.getRow()+", columna "+e1.getCol());
RESULT=new SymAttributes("error", e1.getRow(), e1.getCol(), e1.getName());
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXP ::= EXPT 
            {
              SymAttributes RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymAttributes e = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPT ::= EXPT mul FACTOR 
            {
              SymAttributes RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymAttributes e = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymAttributes f = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
if (e.getType()==f.getType()){
RESULT=e;
}else if((e.getType()=="error")||(f.getType()=="error")){
RESULT=new SymAttributes("error", e.getRow(), e.getCol(), e.getName());
}else{
System.out.println("El tipo de los operandos de la multiplicación no coincide. Línea "+e.getRow()+", columna "+e.getCol());
RESULT=new SymAttributes("error", e.getRow(), e.getCol(), e.getName());
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPT ::= EXPT div FACTOR 
            {
              SymAttributes RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymAttributes e = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymAttributes f = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
if (e.getType()==f.getType()){
RESULT=e;
}else if((e.getType()=="error")||(f.getType()=="error")){
RESULT=new SymAttributes("error", e.getRow(), e.getCol(), e.getName());
}else{
System.out.println("El tipo de los operandos de la división no coincide. Línea "+e.getRow()+", columna "+e.getCol());
RESULT=new SymAttributes("error", e.getRow(), e.getCol(), e.getName());
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPT ::= FACTOR 
            {
              SymAttributes RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymAttributes f = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FACTOR ::= tid l_par LID r_par 
            {
              SymAttributes RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FACTOR ::= l_bracket EXP r_bracket 
            {
              SymAttributes RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymAttributes e = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FACTOR ::= tid 
            {
              SymAttributes RESULT =null;
		 //comprobar si existe 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FACTOR ::= constint 
            {
              SymAttributes RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element c = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SymAttributes("int", c.getLine(), c.getColumn(), c.getName()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FACTOR ::= constfloat 
            {
              SymAttributes RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element c = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SymAttributes("float", c.getLine(), c.getColumn(), c.getName()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TYPE ::= tvoid 
            {
              Element RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TYPE ::= tint 
            {
              Element RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TYPE ::= tfloat 
            {
              Element RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LCOND ::= LCOND tor LCONDT 
            {
              SymAttributes RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymAttributes d = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymAttributes t = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
if (d.getType()==t.getType()){
RESULT=d;
}else if((d.getType()=="error"||t.getType()=="error")){
RESULT=new SymAttributes("error", d.getRow(), d.getCol(), d.getName());
}else{
System.out.println("Los operandos no son compatibles con el operador or. Línea "+d.getRow()+", columna "+d.getCol());
RESULT=new SymAttributes("error", d.getRow(), d.getCol(), d.getName());
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LCOND ::= LCONDT 
            {
              SymAttributes RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymAttributes t = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LCONDT ::= LCONDT tand LCONDF 
            {
              SymAttributes RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymAttributes t = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymAttributes f = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
if (t.getType()==f.getType()){
RESULT=t;
}else if((t.getType()=="error")||(f.getType()=="error")){
RESULT=new SymAttributes("error", t.getRow(), t.getCol(), t.getName());
}else{
System.out.println("Los operandos no son compatibles con el operador and. Línea "+t.getRow()+", columna "+t.getCol());
RESULT=new SymAttributes("error", t.getRow(), t.getCol(), t.getName());
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCONDT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LCONDT ::= LCONDF 
            {
              SymAttributes RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymAttributes l = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCONDT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LCONDF ::= COND 
            {
              SymAttributes RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymAttributes c = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCONDF",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LCONDF ::= tnot COND 
            {
              SymAttributes RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymAttributes c = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCONDF",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COND ::= EXP OPR EXP 
            {
              SymAttributes RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymAttributes e1 = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymAttributes e2 = (SymAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
if (e1.getType()==e2.getType()){
RESULT=e1;
}else if((e1.getType()=="error")||(e2.getType()=="error")){
RESULT=new SymAttributes("error", e1.getRow(), e1.getCol(), e1.getName());
}else{
System.out.println("No se pueden comparar 2 elementos de distinto tipo. Línea "+e1.getRow()+", columna "+e1.getCol());
RESULT=new SymAttributes("error", e1.getRow(), e1.getCol(), e1.getName());
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPR ::= equals 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPR ::= less 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPR ::= greater 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPR ::= greaterequal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPR ::= lessequal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
