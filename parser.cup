/* TOKENS */
import com.semv.practica1.lexer.AnalizadorLexico;
import com.semv.practica1.symbols_table.Element;
import com.semv.practica1.symbols_table.ScopeTree;
import com.semv.practica1.symbols_table.Scope;
import com.semv.practica1.symbols_table.SymAttributes;
import java.util.ArrayList;
action code {:
AnalizadorLexico scanner=(AnalizadorLexico)getScanner();
:}
// terminals
terminal treturn, l_par, r_par, l_brace, r_brace, l_bracket, r_bracket, comma, semicolon;
terminal assig, add, sub, mul, div, tif, tthen, telse, tfor, twhile, tdo, tuntil, tnot, tand, tor, equals;
terminal less, greater, lessequal, greaterequal, include, hfile, constint, constfloat;
terminal Element tvoid;
terminal Element tint;
terminal Element tfloat;
terminal Element tboolean;
terminal Element tid;

// non terminals
non terminal PROGRAM, PART, BLQ, SENTLIST, SENT, EXP, EXPT, FACTOR, LISTPARAM, RESTPART,LCOND,LCONDT, LCONDF, COND,OPR;
non terminal ArrayList<Element> LID;
non terminal Element TYPE;

/* GRAMMAR */

PROGRAM ::= PART PROGRAM 
    | PART 
;

PART ::= TYPE RESTPART 
;

RESTPART ::= tid l_par LISTPARAM r_par BLQ 
;

LISTPARAM ::= LISTPARAM comma TYPE tid 
    | TYPE tid 
;

BLQ ::= l_brace SENTLIST r_brace 
;

SENTLIST ::= SENTLIST SENT 
    | SENT 
;

SENT ::= TYPE:t LID:l semicolon  {:
for (Element id:l){
SymAttributes symAttributes = new SymAttributes(t.getName(), id.getLine(), id.getColumn(), id.getName());
//declaración
System.out.println(t.getName());
	if (ScopeTree.getCurrentScope().getSymTable().addItem(id.getName(), symAttributes)){
		RESULT = symAttributes;
	}
	else{
		System.out.println("El s�mbolo " + id.getName() + " existe. Lin " + id.getLine() + " Col " + id.getColumn());
		RESULT=new SymAttributes("error", -1, -1, "error");
		break;
	}
}
:}
    | tid:id assig EXP:exp semicolon  {:
//asignación
:}
    | tid l_par LID r_par semicolon  {:
//llamada a una función
:}
    | treturn EXP semicolon  {:
//retorno de una función
:}
    | tif l_par LCOND r_par tthen BLQ telse BLQ 
    | tfor l_par tid assig EXP semicolon LCOND semicolon tid assig EXP r_par BLQ 
    | twhile l_par LCOND r_par BLQ 
    | tdo BLQ tuntil l_par LCOND r_par 
    | BLQ 
;

LID ::= tid {:
Element e=new Element(scanner.yytext(), scanner.getYyline(), scanner.getYycolumn());
ArrayList<Element> salida=new ArrayList<Element>();
salida.add(e);
RESULT=salida;
:}
    | tid:t comma LID:l {:
l.add(t);
RESULT=l;
:}
    | /* empty */ 
;

EXP ::= EXP add EXPT 
    | EXP sub EXPT 
    | EXPT  
;

EXPT ::= EXPT mul FACTOR 
    | EXPT div FACTOR 
    | FACTOR 
;

FACTOR ::= tid l_par LID r_par 
    | l_bracket EXP r_bracket 
    | tid 
    | constint  
    | constfloat 
;

TYPE ::= tvoid {: RESULT = new Element(scanner.yytext(), scanner.getYyline(), scanner.getYycolumn()); :}
    | tint {: RESULT = new Element(scanner.yytext(), scanner.getYyline(), scanner.getYycolumn()); :}
    | tfloat {: RESULT = new Element(scanner.yytext(), scanner.getYyline(), scanner.getYycolumn()); :}
;

LCOND::= LCOND tor LCONDT 
        | LCONDT 
;

LCONDT::= LCONDT tand LCONDF 
        |LCONDF 
;

LCONDF ::= COND 
        | tnot COND 
;

COND ::= EXP OPR EXP 
;

OPR::=  equals 
    | less 
    | greater 
    | greaterequal 
    | lessequal 
;
