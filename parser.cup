/* TOKENS */
import com.semv.practica1.symbols_table.Element;
import com.semv.practica1.symbols_table.ScopeTree;
import com.semv.practica1.symbols_table.Scope;
import com.semv.practica1.symbols_table.SymAttributes;
import java.util.ArrayList;
// terminals
terminal comma;
terminal semicolon;
terminal treturn;
terminal l_par;
terminal r_par;
terminal l_brace;
terminal r_brace;
terminal l_bracket;
terminal r_bracket;
terminal equals;
terminal assig;
terminal add;
terminal sub;
terminal mul;
terminal div;
terminal tif;
terminal tthen;
terminal telse;
terminal tfor;
terminal twhile;
terminal tdo;
terminal tnot;
terminal tuntil;
terminal tand;
terminal tor;
terminal less;
terminal greater;
terminal lessequal;
terminal greaterequal;
terminal Element constint;
terminal Element constfloat;
terminal Element constbool;
terminal include;
terminal Element hfile;
terminal Element tvoid;
terminal Element tint;
terminal Element tfloat;
terminal Element tbool;
terminal Element tid;

// non terminals
non terminal SymAttributes PROGRAM;
non terminal SymAttributes PART;
non terminal SymAttributes BLQ;
non terminal SymAttributes SENTLIST;
non terminal SymAttributes SENT;
non terminal SymAttributes EXP;
non terminal SymAttributes EXPT;
non terminal SymAttributes FACTOR;
non terminal SymAttributes LISTPARAM;
non terminal SymAttributes RESTPART;
non terminal SymAttributes LCOND;
non terminal SymAttributes LCONDT;
non terminal SymAttributes LCONDF;
non terminal SymAttributes COND;
non terminal OPR;
non terminal ArrayList<Element> LID;
non terminal Element TYPE;

/* GRAMMAR */

PROGRAM ::= include hfile PROGRAM
    | PART:p1 PROGRAM:p2 {:
if ((p1.getType().equals("error"))||(p2.getType().equals("error"))){
RESULT=new SymAttributes("error", p1.getRow(), p1.getCol(), p1.getName());
}else{
RESULT=p2;
}
:}
    | PART:p {: RESULT=p; :}
;

PART ::= TYPE:t {:
Scope scope=new Scope(ScopeTree.getCurrentScope(), "", t.getName());
ScopeTree.getCurrentScope().addChild(scope);
ScopeTree.setCurrentScope(scope);
:}
RESTPART:r {:
ScopeTree.setCurrentScope(ScopeTree.getCurrentScope().getParent());
RESULT=r;
:}
;

RESTPART ::= tid:id {:
Scope scope=ScopeTree.getCurrentScope();
if (scope.getParent().getSymTable().addItem(id.getName(), new SymAttributes(scope.getType(), id.getLine(), id.getColumn(), id.getName()))){
scope.setName(id.getName());
}
:}
l_par LISTPARAM:l r_par BLQ:b {:
if ((b.getType().equals("error"))||(l.getType().equals("error"))){
RESULT=b; //propagamos el error
}else{
RESULT=new SymAttributes("", id.getLine(), id.getColumn(), id.getName());
}
:}
;

LISTPARAM ::= LISTPARAM:l comma TYPE:t tid:id {:
if (l.getType().equals("error")){
RESULT=l; //propagamos
}else{
SymAttributes symbol=new SymAttributes(t.getName(), id.getLine(), id.getColumn(), id.getName());
if (ScopeTree.getCurrentScope().getSymTable().addItem(symbol.getName(), symbol)){
RESULT=symbol;
}else{
System.out.println("Identificador repetido en la cabecera de la función. Línea "+symbol.getRow()+", columna "+symbol.getCol());
RESULT=new SymAttributes("error", symbol.getRow(), symbol.getCol(), symbol.getName());
}
}
:}
    | TYPE:t tid:id {:
SymAttributes symbol=new SymAttributes(t.getName(), id.getLine(), id.getColumn(), id.getName());
ScopeTree.getCurrentScope().getSymTable().addItem(symbol.getName(), symbol);
RESULT=symbol;
:}
;

BLQ ::= l_brace SENTLIST:s r_brace {: 
RESULT=s; :}
;

SENTLIST ::= SENTLIST:l SENT:s {:
if ((l.getType().equals("error"))||(s.getType().equals("error"))){
RESULT=new SymAttributes("error", s.getRow(), s.getCol(), s.getName());
}else{
RESULT=l;
}
:}
    | SENT:s {: RESULT=s; :}
;

SENT ::= TYPE:t LID:l semicolon  {:
for (Element id:l){
SymAttributes symAttributes = new SymAttributes(t.getName(), id.getLine(), id.getColumn(), id.getName());
if (ScopeTree.getCurrentScope().getSymTable().addItem(id.getName(), symAttributes)){
		RESULT = symAttributes;
	}
	else{
		System.out.println("El símbolo " + id.getName() + " existe. Lin " + id.getLine() + " Col " + id.getColumn());
		RESULT=new SymAttributes("error", -1, -1, "error");
		break;
	}
}
:}
    | tid:id assig EXP:exp semicolon  {:
SymAttributes symbol=null;
Scope scope=ScopeTree.getCurrentScope();
while (scope!=null){
symbol=scope.getSymTable().getAttributes(id.getName());
if (symbol!=null){
break; // lo hemos encontrado!
}
scope=scope.getParent();
}
if (symbol==null){
System.out.println("No se encuentra el símbolo "+id.getName()+" al que se hace referencia en línea "+id.getLine()+", columna "+id.getColumn());
RESULT=new SymAttributes("error", id.getLine(), id.getColumn(), id.getName());
}else{
if (symbol.getType().equals(exp.getType())){
RESULT=exp;
}else if((symbol.getType().equals("error"))||(exp.getType().equals("error"))){
RESULT=new SymAttributes("error", symbol.getRow(), symbol.getCol(), symbol.getName());
}else{
System.out.println("No se puede asignar la expresión a la variable "+symbol.getName()+", línea "+symbol.getRow()+", columna "+symbol.getCol());
RESULT=new SymAttributes("error", symbol.getRow(), symbol.getCol(), symbol.getName());
}
}
:}
    | tid:id l_par LID r_par semicolon  {:
SymAttributes symbol=null;
Scope scope=ScopeTree.getCurrentScope();
while (scope!=null){
symbol=scope.getSymTable().getAttributes(id.getName());
if (symbol!=null){
break; // lo hemos encontrado!
}
scope=scope.getParent();
}
if (symbol==null){
System.out.println("No se encuentra el símbolo "+id.getName()+" al que se hace referencia en línea "+id.getLine()+", columna "+id.getColumn());
RESULT=new SymAttributes("error", id.getLine(), id.getColumn(), id.getName());
}else{
RESULT=new SymAttributes(symbol.getType(), id.getLine(), id.getColumn(), id.getName());
}
:}
    | treturn EXP:e semicolon  {:
if ((ScopeTree.getCurrentScope().getType().equals(e.getType()))||(e.getType().equals("error"))){
RESULT=e;
}else{
System.out.println("La sentencia return no devuelve un valor del tipo esperado. Línea "+e.getRow()+", columna "+e.getCol());
RESULT=new SymAttributes("error", e.getRow(), e.getCol(), e.getName());
}
:}
    | tif l_par LCOND:l r_par tthen BLQ:b1 telse BLQ:b2 {:
if ((l.getType().equals("error"))||(b1.getType().equals("error"))||(b2.getType().equals("error"))){
RESULT=new SymAttributes("error", l.getRow(), l.getCol(), l.getName());
}else{
RESULT=new SymAttributes("", 0, 0, "");
}
:}
    | tfor l_par tid:id1 assig EXP:e1 semicolon LCOND:l semicolon tid:id2 assig EXP:e2 r_par BLQ:b {:
if (e1.getType().equals("error")) {
RESULT=new SymAttributes("error", e1.getRow(), e1.getCol(), e1.getName());
}
else if (l.getType().equals("error")) {
RESULT=new SymAttributes("error", l.getRow(), l.getCol(), l.getName());
}
else if (e2.getType().equals("error")) {
RESULT=new SymAttributes("error", e2.getRow(), e2.getCol(), e2.getName());
}
else if(b.getType().equals("error")){
RESULT=new SymAttributes("error", b.getRow(), b.getCol(), b.getName());
}
else {
//no hay errores en las expresiones, vamos a ver si existen los símbolos
SymAttributes symbol1=null;
SymAttributes symbol2=null;
Scope scope=ScopeTree.getCurrentScope();
while (scope!=null){
if (symbol1==null){
symbol1=scope.getSymTable().getAttributes(id1.getName());
}
if (symbol2==null){
symbol2=scope.getSymTable().getAttributes(id2.getName());
}
if ((symbol1!=null)&&(symbol2!=null)){
break; // hemos encontrado los 2
}
scope=scope.getParent();
}
if (symbol1==null){
System.out.println("No se encuentra el símbolo "+id1.getName()+" al que se hace referencia en línea "+id1.getLine()+", columna "+id1.getColumn());
RESULT=new SymAttributes("error", id1.getLine(), id1.getColumn(), id1.getName());
}else if(symbol2==null){
System.out.println("No se encuentra el símbolo "+id2.getName()+" al que se hace referencia en línea "+id2.getLine()+", columna "+id2.getColumn());
RESULT=new SymAttributes("error", id2.getLine(), id2.getColumn(), id2.getName());
}else{
RESULT=new SymAttributes("", 0, 0, "");
}
}
:}
    | twhile l_par LCOND:l r_par BLQ:b {:
if (l.getType().equals("error")){
RESULT=l;
}else if (b.getType().equals("error")){
RESULT=b;
}else{
RESULT=new SymAttributes("", 0, 0, "");
}
:}
    | tdo BLQ:b tuntil l_par LCOND:l r_par {:
if ((b.getType().equals("error"))||(l.getType().equals("error"))){
RESULT=new SymAttributes("error", l.getRow(), l.getCol(), l.getName());
}else{
RESULT=new SymAttributes("", 0, 0, "");
}
:}
    | BLQ:b {: RESULT=b; :}
;

LID ::= tid:id {:
ArrayList<Element> salida=new ArrayList<Element>();
salida.add(id);
RESULT=salida;
:}
    | tid:t comma LID:l {:
l.add(t);
RESULT=l;
:}
    | /* empty */ 
;

EXP ::= EXP:e1 add EXPT:e2 {:
if (e1.getType().equals(e2.getType())){
RESULT=e1;
}else if((e1.getType().equals("error"))||(e2.getType().equals("error"))){
RESULT=new SymAttributes("error", e1.getRow(), e1.getCol(), e1.getName());
}else{
System.out.println("El tipo de los operandos de la suma no coincide. Línea "+e1.getRow()+", columna "+e1.getCol());
RESULT=new SymAttributes("error", e1.getRow(), e1.getCol(), e1.getName());
}
:}
    | EXP:e1 sub EXPT:e2 {:
if (e1.getType().equals(e2.getType())){
RESULT=e1;
}else if((e1.getType().equals("error"))||(e2.getType().equals("error"))){
RESULT=new SymAttributes("error", e1.getRow(), e1.getCol(), e1.getName());
}else{
System.out.println("El tipo de los operandos de la resta no coincide. Línea "+e1.getRow()+", columna "+e1.getCol());
RESULT=new SymAttributes("error", e1.getRow(), e1.getCol(), e1.getName());
}
:}
    | EXPT:e  {: RESULT=e; :}
;

EXPT ::= EXPT:e mul FACTOR:f {:
if (e.getType().equals(f.getType())){
RESULT=e;
}else if((e.getType().equals("error"))||(f.getType().equals("error"))){
RESULT=new SymAttributes("error", e.getRow(), e.getCol(), e.getName());
}else{
System.out.println("El tipo de los operandos de la multiplicación no coincide. Línea "+e.getRow()+", columna "+e.getCol());
RESULT=new SymAttributes("error", e.getRow(), e.getCol(), e.getName());
}
:}
    | EXPT:e div FACTOR:f {:
if (e.getType().equals(f.getType())){
RESULT=e;
}else if((e.getType().equals("error"))||(f.getType().equals("error"))){
RESULT=new SymAttributes("error", e.getRow(), e.getCol(), e.getName());
}else{
System.out.println("El tipo de los operandos de la división no coincide. Línea "+e.getRow()+", columna "+e.getCol());
RESULT=new SymAttributes("error", e.getRow(), e.getCol(), e.getName());
}
:}
    | FACTOR:f {: RESULT=f; :}
;

FACTOR ::= tid:id l_par LID r_par {: 
Scope scope=ScopeTree.getCurrentScope();
SymAttributes symbol=null;
while (scope!=null){
symbol=scope.getSymTable().getAttributes(id.getName());
if (symbol!=null){
break; // lo hemos encontrado!
}
scope=scope.getParent();
}
if (symbol==null){
System.out.println("No se encuentra el símbolo especificado. Línea "+id.getLine()+", columna "+id.getColumn());
RESULT=new SymAttributes("error", id.getLine(), id.getColumn(), id.getName());
}else{
RESULT=new SymAttributes(symbol.getType(), id.getLine(), id.getColumn(), id.getName());
}
:}
    | l_bracket EXP:e r_bracket {: RESULT=e; :}
    | tid:id {: 
Scope scope=ScopeTree.getCurrentScope();
SymAttributes symbol=null;
while (scope!=null){
symbol=scope.getSymTable().getAttributes(id.getName());
if (symbol!=null){
break; // lo hemos encontrado!
}
scope=scope.getParent();
}
if (symbol==null){
System.out.println("No se encuentra el símbolo especificado. Línea "+id.getLine()+", columna "+id.getColumn());
RESULT=new SymAttributes("error", id.getLine(), id.getColumn(), id.getName());
}else{
RESULT=new SymAttributes(symbol.getType(), id.getLine(), id.getColumn(), id.getName());
}
 :}
    | constint:c  {: RESULT = new SymAttributes("int", c.getLine(), c.getColumn(), c.getName()); :}
    | constfloat:c {: RESULT = new SymAttributes("float", c.getLine(), c.getColumn(), c.getName()); :}
    | constbool:c {: RESULT = new SymAttributes("bool", c.getLine(), c.getColumn(), c.getName()); :}
;

TYPE ::= tvoid:t {: RESULT = t; :}
    | tint:t {: RESULT = t; :}
    | tfloat:t {: RESULT = t; :}
    | tbool:t {: RESULT=t; :}
;

LCOND::= LCOND:d tor LCONDT:t {:
if (d.getType().equals(t.getType())){
RESULT=d;
}else if((d.getType().equals("error")||t.getType().equals("error"))){
RESULT=new SymAttributes("error", d.getRow(), d.getCol(), d.getName());
}else{
System.out.println("Los operandos no son compatibles con el operador or. Línea "+d.getRow()+", columna "+d.getCol());
RESULT=new SymAttributes("error", d.getRow(), d.getCol(), d.getName());
}
:}
        | LCONDT:t {: RESULT=t; :}
;

LCONDT::= LCONDT:t tand LCONDF:f {:
if (t.getType().equals(f.getType())){
RESULT=t;
}else if((t.getType().equals("error"))||(f.getType().equals("error"))){
RESULT=new SymAttributes("error", t.getRow(), t.getCol(), t.getName());
}else{
System.out.println("Los operandos no son compatibles con el operador and. Línea "+t.getRow()+", columna "+t.getCol());
RESULT=new SymAttributes("error", t.getRow(), t.getCol(), t.getName());
}
:}
        |LCONDF:l {: RESULT=l; :}
;

LCONDF ::= COND:c {: RESULT=c; :}
        | tnot COND:c {: RESULT=c; :}
;

COND ::= EXP:e1 OPR EXP:e2 {:
if (e1.getType().equals(e2.getType())){
RESULT=e1;
}else if((e1.getType().equals("error"))||(e2.getType().equals("error"))){
RESULT=new SymAttributes("error", e1.getRow(), e1.getCol(), e1.getName());
}else{
System.out.println("No se pueden comparar 2 elementos de distinto tipo. Línea "+e1.getRow()+", columna "+e1.getCol()+". El primero es de tipo "+e1.getType()+", y el segundo es "+e2.getType());
RESULT=new SymAttributes("error", e1.getRow(), e1.getCol(), e1.getName());
}
:}
;

OPR::=  equals 
    | less 
    | greater 
    | greaterequal 
    | lessequal 
;
